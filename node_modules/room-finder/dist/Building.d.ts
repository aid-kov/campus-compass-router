import { Hallway } from "./Hallway";
import { StairOneWay } from "./StairOneWay";
/**
 * This is the class that we use to define a building. See README.md for
 * a tutorial on how to create a Building.
 *
 * Note on TypeScript usage: It is recommended that you supply your own types
 * for the generic type parameters ForkName and StairName. See README.md
 * for an example.
 *
 * @typeParam ForkName - The type of string that a node ID for a [[Room]] or [[Fork]]
 * may use.
 * @typeParam StairName - The type of string that a node ID for [[Stairs]] may use.
 */
export declare class Building<ForkName extends string = string, StairName extends string = string> {
    readonly hallways: Hallway<ForkName, StairName>[];
    readonly allowedConnections: (ForkName | StairName)[];
    /**
     * The graph that is generated from the nodes in the [[hallways]] and the
     * connections between them
     */
    readonly graph: {
        [key: string]: {
            [key: string]: number;
        };
    };
    /**
     * An array of all of the names and aliases for all of the rooms
     * @category Important
     */
    readonly roomsList: string[];
    readonly oneWayStaircases: Partial<Record<StairName, StairOneWay>>;
    /**
     *
     * @param hallways - All of the hallways in this building
     * @param oneWayStaircases - An object representing all of the one way
     * staircases in the building. For example, if stairA is one-way and only
     * down, it would be { stairA: "down" }.
     * @category Important
     */
    constructor(hallways: Hallway<ForkName, StairName>[], { oneWayStaircases, }?: {
        oneWayStaircases?: Partial<Record<StairName, StairOneWay>>;
    }, allowedConnections?: (ForkName | StairName)[]);
    withAllowedConnectionTypes(allowedConnections: (ForkName | StairName)[] | ((name: string) => boolean)): Building<ForkName, StairName>;
    /**
     * @param name - The name of the room
     * @returns An array, where the first element is the index of the hallway where
     * the room is located, and the second element is the index of the room in the
     * hallway. If the room doesn't exist, returns null.
     */
    getHallwayIndexAndIndex(name: string): [number, number] | null;
    /**
     * @ignore
     * @param nodeId - The id of the node
     * @returns An array, where the first element is the index of the hallway where
     * the node is located, and the second element is the index of the node in the
     * hallway
     */
    private getHallwayIndexAndIndexFromNode;
    /**
     *
     * @ignore
     * TODO
     * @returns The instructions to go up/down that staircase the correct number
     * of floors
     */
    getStairConnectionInstruction(stairName: StairName, floor1: number, floor2: number): string;
    /**
     * This is the method that tells you how to get from one room
     * to another in a building.
     * @param from - The name of the starting room
     * @param to - The name of the destination room
     * @param capitalize - Whether to capitalize the beginning of every line
     * @param periods - Whether to add a period at the end of every instruction
     * @returns The directions to get from room `from` to room `to`
     * @category Important
     */
    getDirections(from: string, to: string, { capitalize, periods, }?: {
        capitalize?: boolean;
        periods?: boolean;
    }): string | null;
    /**
     *
     * @param name - A possible name for a room in this building
     * @returns true if there is a room with the name or alias
     * `name`, and false otherwise.
     * @cateogry Important
     */
    isValidRoomName(name: string): boolean;
}
